{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-02-11T08:40:04.871Z","updated":"2021-02-11T08:40:04.871Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-02-11T08:40:04.967Z","updated":"2021-02-11T08:40:04.967Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-02-11T08:40:04.955Z","updated":"2021-02-11T08:40:04.955Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2021-02-11T08:40:04.980Z","updated":"2021-02-11T08:40:04.980Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-02-11T08:40:05.020Z","updated":"2021-02-11T08:40:05.020Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-02-11T08:40:04.994Z","updated":"2021-02-11T08:40:04.994Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-02-11T08:40:05.034Z","updated":"2021-02-11T08:40:05.034Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2021-02-11T08:37:19.353Z","updated":"2021-02-11T08:37:19.353Z","comments":true,"path":"2021/02/11/hello-world/","link":"","permalink":"http://example.com/2021/02/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"My Test","slug":"My-Test","date":"2021-02-11T07:05:36.000Z","updated":"2021-02-11T07:05:36.576Z","comments":true,"path":"2021/02/11/My-Test/","link":"","permalink":"http://example.com/2021/02/11/My-Test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"AES加密与解密","slug":"AES","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T05:18:43.215Z","comments":true,"path":"2021/02/08/AES/","link":"","permalink":"http://example.com/2021/02/08/AES/","excerpt":"","text":"AES加密与解密 采用AES对信息进行加密与解密","categories":[{"name":"Editor","slug":"Editor","permalink":"http://example.com/categories/Editor/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"}]},{"title":"三次贝塞尔曲线","slug":"Bezier","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T04:42:43.813Z","comments":true,"path":"2021/02/08/Bezier/","link":"","permalink":"http://example.com/2021/02/08/Bezier/","excerpt":"","text":"Bezier 三次贝塞尔曲线 设置三个点的坐标，通过贝塞尔曲线运算，在 LineRender 中插入坐标，使其拟合；主要方法如下： 123456789101112131415161718void getBezier(int num) &#123; line.positionCount = 0; Vector3[] vector3 = new Vector3[num+1]; for (int i = 0; i &lt;= num; i++) &#123; float value = ((float)i / (float)num); vector3[i]= (1 - value * value) * tag0.transform.position + 2 * value * (1 - value) * tag1.transform.position + value * value * tag2.transform.position; //Debug.Log(vector3[i]+&quot; &quot;+ value.ToString(&quot;&quot;)+&quot; &quot;+ num+ &quot; &quot; + i); &#125; line.positionCount = vector3.Length; line.SetPositions(vector3); for (int i = 0; i &lt; vector3.Length; i++) &#123; line.SetPosition(i, vector3[i]); &#125; &#125;","categories":[{"name":"Editor","slug":"Editor","permalink":"http://example.com/categories/Editor/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"}]},{"title":"读取Excel","slug":"Excel","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T04:38:01.220Z","comments":true,"path":"2021/02/08/Excel/","link":"","permalink":"http://example.com/2021/02/08/Excel/","excerpt":"","text":"Excel 读取Excel 参考链接","categories":[{"name":"Editor","slug":"Editor","permalink":"http://example.com/categories/Editor/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"}]},{"title":"Json读取与写入","slug":"Json","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T04:39:18.554Z","comments":true,"path":"2021/02/08/Json/","link":"","permalink":"http://example.com/2021/02/08/Json/","excerpt":"","text":"Json读取与写入 Json读取与写入 在editor界面对Json读取与写入； 对Json数据的操作可以分为：读取数据，操作数据，写入数据。首先，是对数据的读取： 1234567StreamReader sr = new StreamReader(Url, Encoding.UTF8);string json = sr.ReadToEnd();sr.Close();if (json.Length &gt; 0)&#123;skills_ = JsonUtility.FromJson&lt;Skills&gt;(json);&#125; 读取文件采用从流中读取的方式，将json信息读取到本地对应的结构中。将数据读取到本地后，就可以按照对一般数据操作的方式对数据进行操作。操作完成后，将新的数据结构转换成json字符串，然后再写进json文件中 12string json_ = JsonUtility.ToJson(skills, true);File.WriteAllText(Url, json_, Encoding.UTF8);","categories":[{"name":"数据操作","slug":"数据操作","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"}]},{"title":"MapEditor","slug":"MapEditor","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T04:44:59.944Z","comments":true,"path":"2021/02/08/MapEditor/","link":"","permalink":"http://example.com/2021/02/08/MapEditor/","excerpt":"","text":"MapEditor 地图编辑器","categories":[{"name":"地图编辑器","slug":"地图编辑器","permalink":"http://example.com/categories/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91%E5%99%A8/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"}]},{"title":"QR Code","slug":"QR Code","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T04:38:46.339Z","comments":true,"path":"2021/02/08/QR Code/","link":"","permalink":"http://example.com/2021/02/08/QR%20Code/","excerpt":"","text":"QR Code 二维码生成器 Local：本地生成； Network request ：请求草料二维码API ，返回二维码图片，需要网络 Loca：使用本地生成二维码需要引入“zxing.dll”文件，对字符串进行解析。 1、将字符串数据转换成二维码数据： 12345678910111213private static Color32[] Encode(string textForEncoding, int width, int height) &#123; var writer = new BarcodeWriter &#123; Format = BarcodeFormat.QR_CODE, Options = new QrCodeEncodingOptions &#123; Height = height, Width = width &#125; &#125;; return writer.Write(textForEncoding); &#125; 2、将二维码数据交给对应的图片，目前图片的显示主要为UGUI中的Texture格式和Sprite精灵图片，以下就分别赋值给两种格式 Texture： 1234567891011121314151617public static Texture CreatQR_texture(string message) &#123; Texture2D encoded; encoded = new Texture2D(256, 256); if (message.Length &gt; 1) &#123; //二维码写入图片 var color32 = Encode(message, encoded.width, encoded.height); encoded.SetPixels32(color32); encoded.Apply(); &#125; else &#123; Debug.Log(&quot;生成二维码失败&quot;); &#125; return encoded; &#125; Sprite: 12345678910111213141516171819public static Sprite CreatQR_sprite(string message) &#123; Texture2D encoded; encoded = new Texture2D(256, 256); if (message.Length &gt; 1) &#123; //二维码写入图片 var color32 = Encode(message, encoded.width, encoded.height); encoded.SetPixels32(color32); encoded.Apply(); &#125; else &#123; Debug.Log(&quot;生成二维码失败&quot;); &#125; Sprite sprite = Sprite.Create(encoded, new Rect(0, 0, encoded.width, encoded.height), Vector2.zero); return sprite; &#125; Net：网络请求二维码，是直接调用草料二维码在线生成二维码API，通过解析返回页面，获取对应二维码图片，再交给对应图片对象； 网络请求： 查询草料官网的API，找到请求格式，这就是之后我们需要请求的地址； 在浏览器根据API的格式输入请求地址 https://cli.im/api/qrcode/code?text=https://DarkingForUnity.github.io 在浏览器界面按下F12，调出界面代码，依次点击 1、2，在3区域能看到二维码的图片链接，我们需要的就是提取src=&quot;//后面的图片链接。 将提取到的图片链接直接输入浏览器，就可以看到成功出现了二维码，就表示这个地址可用，我们可以在unity中使用该地址获取图片 1234567891011WWW w = new WWW(&quot;https://cli.im/api/qrcode/code?text=&quot; + message); yield return w; //获取&#x27;src=&quot; //&#x27; 后所有的数据 string s = w.text.Substring(w.text.IndexOf(&quot;&lt;img src=&quot;) + 12, w.text.Length - (w.text.IndexOf(&quot;&lt;img src=&quot;) + 12)); //截取src=&quot;&quot; 内部的链接地址，不包括&#x27;//&#x27; string result = s.Substring(0, s.IndexOf(&quot;\\&quot;&quot;)); WWW www = new WWW(result); yield return www; encoded.texture= www.texture; 获取图片信息后的赋值操作和上面的一样，就不重复赘述。","categories":[{"name":"二维码","slug":"二维码","permalink":"http://example.com/categories/%E4%BA%8C%E7%BB%B4%E7%A0%81/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"}]},{"title":"SpriteManage 精灵管理","slug":"SpriteManage","date":"2021-02-08T15:55:27.000Z","updated":"2021-02-11T04:37:14.981Z","comments":true,"path":"2021/02/08/SpriteManage/","link":"","permalink":"http://example.com/2021/02/08/SpriteManage/","excerpt":"","text":"SpriteManage 精灵管理： 检索场景中所有的空引用精灵图片；未激活spriterender组件的对象，未激活对象的spriterender；对于频繁改动的场景素材，有时候会留下一些空图片或者暂时保留，隐藏，最后要删除的图片对象。此脚本能帮助检索，识别以上对象，并进行一键清除组件或者清除对象。 检索场景中引用到的精灵图集1、能够检索到场景中使用的所有图片的地址、图片存放文件夹地址以及打包图集名称，检测出是否包含未打包图片以及筛选未打包图片2、在引用过多过杂乱的情况下，提供一键迁移功能，能够将图片一键迁移到目标文件夹，并将图片引用地址转移到新图片。","categories":[{"name":"Editor Sprite","slug":"Editor-Sprite","permalink":"http://example.com/categories/Editor-Sprite/"}],"tags":[{"name":"Unity Sprite","slug":"Unity-Sprite","permalink":"http://example.com/tags/Unity-Sprite/"}]}],"categories":[{"name":"Editor","slug":"Editor","permalink":"http://example.com/categories/Editor/"},{"name":"数据操作","slug":"数据操作","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"},{"name":"地图编辑器","slug":"地图编辑器","permalink":"http://example.com/categories/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"二维码","slug":"二维码","permalink":"http://example.com/categories/%E4%BA%8C%E7%BB%B4%E7%A0%81/"},{"name":"Editor Sprite","slug":"Editor-Sprite","permalink":"http://example.com/categories/Editor-Sprite/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://example.com/tags/Unity/"},{"name":"Unity Sprite","slug":"Unity-Sprite","permalink":"http://example.com/tags/Unity-Sprite/"}]}